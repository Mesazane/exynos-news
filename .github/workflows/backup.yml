name: Strict Content Indexing
on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *'  # Daily at 3 AM UTC

jobs:
  strict-indexer:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Validate Posts
        run: |
          cat << 'EOF' > validate_posts.py
          import sys
          import os
          from bs4 import BeautifulSoup
          from datetime import datetime

          POSTS_DIR = 'docs/news/current'
          DATE_FORMAT = '%Y-%m-%d'
          valid_count = 0
          errors = []

          for filename in os.listdir(POSTS_DIR):
              if filename == 'index.html' or not filename.endswith('.html'):
                  continue

              path = os.path.join(POSTS_DIR, filename)
              with open(path) as f:
                  soup = BeautifulSoup(f, 'html.parser')

              # Strict validation
              meta_date = soup.find('meta', {'name': 'date'}) or \
                          soup.find('meta', {'property': 'article:published_time'})
              visible_date = soup.find(string=lambda t: 'Published:' in t)
              
              if not meta_date and not visible_date:
                  errors.append(f"‚ùå {filename}: No valid date found")
                  continue
                  
              if meta_date and visible_date:
                  errors.append(f"‚ö†Ô∏è {filename}: Both meta and visible dates present")
                  continue

              try:
                  date_str = meta_date['content'] if meta_date else visible_date.split(':')[-1].strip()
                  datetime.strptime(date_str, DATE_FORMAT)
                  valid_count += 1
              except (ValueError, KeyError, AttributeError) as e:
                  errors.append(f"üö´ {filename}: Invalid date format - {str(e)}")

          # Report and exit
          if errors:
              print("\nValidation Errors:")
              for error in errors:
                  print(error)
              sys.exit(1)
          
          print(f"‚úÖ All {valid_count} posts validated successfully")
          EOF
          
          python3 validate_posts.py

      - name: Generate Index
        run: |
          cat << 'EOF' > generate_index.py
          import os
          import json
          from bs4 import BeautifulSoup
          from datetime import datetime

          INDEX_PATH = 'docs/news/_index.json'
          POSTS_DIR = 'docs/news/current'
          DATE_FORMAT = '%Y-%m-%d'

          index = {
              "meta": {
                  "schema": "2.0-strict",
                  "generated": datetime.utcnow().isoformat(),
                  "date_source": "meta-or-visible"
              },
              "posts": []
          }

          for filename in os.listdir(POSTS_DIR):
              if filename == 'index.html' or not filename.endswith('.html'):
                  continue

              path = os.path.join(POSTS_DIR, filename)
              with open(path) as f:
                  soup = BeautifulSoup(f, 'html.parser')

              # Extract validated date
              date_source = soup.find('meta', {'name': 'date'}) or \
                           soup.find('meta', {'property': 'article:published_time'})
              if date_source:
                  date_str = date_source['content']
                  source_type = 'meta'
              else:
                  date_str = soup.find(string=lambda t: 'Published:' in t).split(':')[-1].strip()
                  source_type = 'visible'

              post = {
                  "path": filename,
                  "title": soup.title.text.replace('| Exynos-News', '').strip(),
                  "date": date_str,
                  "source": source_type,
                  "valid": True
              }

              index['posts'].append(post)

          # Sort by parsed date
          index['posts'].sort(
              key=lambda x: datetime.strptime(x['date'], DATE_FORMAT),
              reverse=True
          )

          with open(INDEX_PATH, 'w') as f:
              json.dump(index, f, indent=2, ensure_ascii=False)
          EOF
          
          python3 generate_index.py

      - name: Commit Index
        run: |
          git config --global user.name "Index Enforcer"
          git config --global user.email "index@exynos-news"
          git add docs/news/_index.json
          git commit -m "üîí Strict index: $(date +'%Y-%m-%d')"
          git push

      - name: System Report
        run: |
          echo "### Indexing Report" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          jq '{posts: .posts | length, schema: .meta.schema}' docs/news/_index.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
